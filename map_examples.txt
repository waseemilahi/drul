
The principal method of producing new patterns (other than hard-coded user input) is the map construct.  At its simplest, this can be used to produce the inversion of an existing pattern, of existing length:

	downbeats = pattern("1000100010001000");
	others = map (downbeats) { 
		if (downbeats.note) { pattern("0") } else { pattern("1") }
	};

The map block iterates over each beat of the input pattern, and the patterns produced by each iteration are concatenated to form a new pattern, which is returned to "others".  

This can also be used to simply produce the augmentation of a beat pattern:

	augmented_downbeats = map(downbeats) {
		if (downbeats.note) { pattern("10") } else { pattern("00") }
	};

A dimunition (playing the pattern twice as fast) requires a more complicated arrangement: since the map block has no way of knowing what the current beat count is, a separate counter pattern is required.

	alternate_beats = pattern("10").repeat(8);
	downbeat_dimunition = map(downbeats alternate_beats) {
		if (alternate_beats.rest) { pattern("") } // a pattern with no length
		elsif (downbeats.note) { pattern("1") }
		else { pattern("0") }
	};

For another level of complication, consider an improvement on the dimunition above: what if we want a dimunition that maps each two beats to one, but which has a rest only if *both* of those two beats are silent?  The approach above would clearly fail, since even-numbered beats are simply dropped on the floor.  This requires capabilities not yet obviously present:

	// this will map "1001100110011001" to "11111111", rather than "10101010"
	one_and_four = pattern("1001100110011001");
	improved_dimunition = map(one_and_four alternate_beats) {
		if(alternate_beats.rest) 			{ pattern("")  } // still required
		elsif (one_and_four.note) 			{ pattern("1") }
		elsif (one_and_four.next(1).note)	{ pattern("1") }
		else  								{ pattern("0") }
	};


More complicated reductions can be achieved using the "prev" construct, which is analogous to "next":

	// to map notes on the upbeat or downbeat, but not beats two or three:
	one_or_four = pattern("1001000110000000");
	new_pattern = map(one_or_four downbeats ) {
		if ( downbeats.rest ) { pattern("") }
		else {
			if (one_or_four.note) { pattern("1") }
			elsif (one_or_four.prev(1).note) {pattern("1") }
			else 	{ pattern("0") }
		}
	};  // produces "1110"
	
Since this type of transform can grow complicated with relative ease, "map" blocks can be written separately, using the "mapper" keyword.  The previous result can be duplicated using the following code:

	mapper up_or_downbeat (main counter) {
		if ( counter.rest ) { pattern("") }
		else {
			if ( main.note ) 			{ pattern("1") }
			elsif ( main.prev(1).note )	{ pattern("1") }
			else 						{ pattern("0") }
		}
	};
	
	new_pattern = map(one_or_four downbeats) up_or_downbeat;

